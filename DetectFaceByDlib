import cv2
import dlib
# 这里使用已存储的视频文件

cap = cv2.VideoCapture(
    r'VEDIO/shamless.mp4'
)
fps = cap.get(cv2.CAP_PROP_FPS)
print(fps)
size = (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
    int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))

print(size)

# 使用shape_predictor_68_face_landmarks.dat，
Face_68_landmarks = r'model_feature/shape_predictor_68_face_landmarks.dat'
Face_classfier_Resnet = r'model_feature/dlib_face_recognition_resnet_model_v1.dat'
Face_classfier = r'mmod_human_face_detector.dat'
detector = dlib.get_frontal_face_detector()
#若需识别人脸所用
Classfier_ResNet = dlib.face_recognition_model_v1(Face_classfier_Resnet)
predictor = dlib.shape_predictor(Face_68_landmarks)
# 识别出人脸后要画的边框的颜色，BRG格式，openCV中与普通RGB值不同（历史遗留习惯）
color = (0, 255, 0)
fourcc = cv2.VideoWriter_fourcc(*'M','P','4','2')  # 保存视频的编码
out = cv2.VideoWriter('outputbydlib.avi', fourcc, fps, size)
while cap.isOpened():
    ok, frame = cap.read()  # 读取一帧数据
   #如果读取失败，直接break
    if not ok:
        break
    # 读取成功后，将当前帧转换成灰度图像
    grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # 人脸检测，使用detector函数进行
    dets = detector(grey,1)
    rects = []
    # 转换人脸对象中的人脸框并保存
    if len(dets) > 0:
        for face in dets:
            cv2.rectangle(frame, (face.left() , face.top()), (face.right(), face.bottom()), color, 2)
            shape = predictor(frame, face)  # 寻找人脸的68个标定点
            # 遍历所有点，打印出其坐标，并圈出
            for pt in shape.parts():
                pt_pos = (pt.x, pt.y)
                cv2.circle(frame, pt_pos, 1, (0, 255, 0), 2)

    # 存储显示图像
    out.write(frame)
    cv2.imshow("Face Detection by dlib", frame)
    c = cv2.waitKey(1)		#数值越小播放越流畅，不可为浮点数
    if c & 0xFF == ord('q'):
        break
# 释放并销毁所有窗口
cap.release()
out.release()
cv2.destroyAllWindows()

